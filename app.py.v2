# app.py
import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

st.set_page_config(page_title="Aksjeradar ‚Äî Screener", layout="wide")
st.title("Aksjeradar ‚Äî Screener üîé")

st.markdown("Last opp en CSV med ticker-symboler (kolonne: `ticker`) eller lim inn tickere adskilt med komma.")

# --- Input: tickere ---
uploaded = st.file_uploader("Last opp CSV (valgfritt)", type=["csv"])
if uploaded:
    df_in = pd.read_csv(uploaded)
    if "ticker" in df_in.columns:
        tickers = df_in["ticker"].astype(str).str.upper().str.strip().tolist()
    else:
        st.error("CSV m√• ha en kolonne som heter `ticker`.")
        st.stop()
else:
    manual = st.text_area("Eller lim inn tickere (f.eks. AAPL,MSFT,EQNR)", value="AAPL,MSFT,TSLA,NFLX,GOOGL")
    tickers = [t.strip().upper() for t in manual.split(",") if t.strip()]

if not tickers:
    st.warning("Ingen tickere oppgitt.")
    st.stop()

# --- Parametre for scoring ---
st.sidebar.header("Scoring-innstillinger")
w_pe = st.sidebar.slider("Vekt: Lav P/E", 0.0, 1.0, 0.2)
w_pb = st.sidebar.slider("Vekt: Lav P/B", 0.0, 1.0, 0.2)
w_debt = st.sidebar.slider("Vekt: Lav Gjeld/Egenkapital", 0.0, 1.0, 0.2)
w_mom = st.sidebar.slider("Vekt: 1-√•r momentum", 0.0, 1.0, 0.2)
w_div = st.sidebar.slider("Vekt: Utbytte yield", 0.0, 1.0, 0.2)
top_n = st.sidebar.number_input("Vis topp N", min_value=1, max_value=200, value=20)

# normalize weights
weights = np.array([w_pe, w_pb, w_debt, w_mom, w_div])
if weights.sum() == 0:
    weights = np.array([0.2, 0.2, 0.2, 0.2, 0.2])
else:
    weights = weights / weights.sum()

st.info(f"Scoring-vekt (normalisert): PE {weights[0]:.2f}, PB {weights[1]:.2f}, Gjeld {weights[2]:.2f}, Momentum {weights[3]:.2f}, Utbytte {weights[4]:.2f}")

# --- Hent data via yfinance ---
st.write("Henter data ‚Äî ett √∏yeblikk...")
results = []

start = (datetime.now() - timedelta(days=400)).strftime("%Y-%m-%d")

# Batch fetch: yfinance can take list
tickers_str = " ".join(tickers)
data = yf.Tickers(tickers_str)  # returns object with .tickers dict
for t in tickers:
    try:
        tk = data.tickers.get(t) or yf.Ticker(t)
        info = tk.info or {}
        hist = tk.history(start=start, actions=False)
        hist1 = tk.history(period='1mo')
        hist3 = tk.history(period='3mo')
    except Exception as e:
        st.warning(f"Feil ved henting av {t}: {e}")
        info = {}
        hist = hist1 = hist3 = pd.DataFrame()

    # grunnverdier med safe-get
    pe = info.get("trailingPE", np.nan)
    pb = info.get("priceToBook", np.nan)
    debt = info.get("debtToEquity", np.nan)
    div_yield = info.get("dividendYield", 0.0) or 0.0
    longname = info.get("longName", "")
    marketcap = info.get("marketCap", np.nan)
    apt = tk.analyst_price_targets
    price = info.get("currentPrice", np.nan)

    # momentum: 1-√•r % endring (bruker tilgjengelig historikk)
    mom = np.nan
    if not hist.empty and "Close" in hist.columns:
        close = hist["Close"].dropna()
        if len(close) >= 252:  # ca 1 √•r handelsdager
            mom = (close.iloc[-1] / close.iloc[0] - 1) * 100
        else:
            mom = (close.iloc[-1] / close.iloc[0] - 1) * 100
    # momentum: 1-mnd
    mom1 = np.nan
    if not hist1.empty and "Close" in hist1.columns:
        close = hist1["Close"].dropna()
        mom1 = (close.iloc[-1] / close.iloc[0] - 1) * 100
    # momentum: 3-mnd
    mom3 = np.nan
    if not hist3.empty and "Close" in hist3.columns:
        close = hist3["Close"].dropna()
        mom3 = (close.iloc[-1] / close.iloc[0] - 1) * 100

    results.append({
        "ticker": t,
        "name": longname,
        "marketCap": marketcap,
        "PE": pe,
        "PB": pb,
        "DebtToEquity": debt,
        "DividendYield": div_yield * 100 if div_yield else 0.0,  # til %
        "1 month": mom1,
        "3 months": mom3,
        "1 year": mom,
        "target": apt["mean"],
        "targetHigh": apt["high"],
        "Price": price,
    })

df = pd.DataFrame(results)

# --- Normalisering / scoring (robust) ---
# For kriterier hvor lav er bedre (PE, Debt), vi inverterer
def robust_rank_series(s, invert=False):
    s = pd.to_numeric(s, errors="coerce")
    # erstatt NaN med median (konservativ)
    med = np.nanmedian(s)
    s_filled = s.fillna(med)
    # rank 0-1
    ranks = (s_filled.rank(method="average") - 1) / (len(s_filled) - 1) if len(s_filled) > 1 else s_filled*0
    if invert:
        ranks = 1 - ranks
    return ranks

pe_rank = robust_rank_series(df["PE"], invert=True)            # lavere PE -> h√∏yere rank
pb_rank = robust_rank_series(df["PB"], invert=True)            # lavere PB -> h√∏yere rank
debt_rank = robust_rank_series(df["DebtToEquity"], invert=True) # lavere gjeld -> h√∏yere rank
mom_rank = robust_rank_series(df["1 year"], invert=False)       # h√∏yere momentum -> h√∏yere rank
div_rank = robust_rank_series(df["DividendYield"], invert=False)   # h√∏yere yield -> h√∏yere rank

df["rank_PE"] = pe_rank
df["rank_PB"] = pb_rank
df["rank_Debt"] = debt_rank
df["rank_Momentum"] = mom_rank
df["rank_Dividend"] = div_rank

# vekting
df["score"] = (weights[0]*df["rank_PE"]
               + weights[1]*df["rank_PB"]
               + weights[2]*df["rank_Debt"]
               + weights[3]*df["rank_Momentum"]
               + weights[4]*df["rank_Dividend"])

# normaliser score 0-100
min_s, max_s = df["score"].min(), df["score"].max()
if max_s > min_s:
    df["Score_0_100"] = ((df["score"] - min_s) / (max_s - min_s) * 100).round(2)
else:
    df["Score_0_100"] = 50.0

# sort og vis
df_display = df.sort_values("Score_0_100", ascending=False).reset_index(drop=True)
st.subheader("Toppliste")
st.dataframe(df_display[["ticker","name","marketCap","PE","PB","Price","1 month","3 months","1 year","target","targetHigh","Score_0_100"]].head(top_n), height=420)

# nedlastning
csv = df_display.to_csv(index=False)
st.download_button("Last ned resultat (CSV)", data=csv, file_name="aksjeradar_screen.csv", mime="text/csv")

# detaljer for en valgt ticker
st.subheader("Detaljer")
sel = st.selectbox("Velg ticker for detaljer", df_display["ticker"].tolist())
if sel:
    sel_row = df_display[df_display["ticker"] == sel].iloc[0].to_dict()
    st.write(sel_row)

    # vis historikk-graf (siste 1 √•r)
    try:
        tkt = yf.Ticker(sel)
        hist = tkt.history(period="1y")
        if not hist.empty:
            st.line_chart(hist["Close"])
        else:
            st.info("Ingen historikk tilgjengelig for denne tickeren.")
    except Exception as e:
        st.warning(f"Kunne ikke hente historikk: {e}")

st.markdown("---")
st.caption("Dette er en enkel screening-MVP. Ikke investeringsr√•d ‚Äî bruk som st√∏tteverkt√∏y.")
